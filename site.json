{"title":"Async.apex","githubRepo":"Click-to-Cloud/Async.apex","googleAnalytics":"","index":{"title":"Home","description":"Async.apex is a promise-like library to handle asynchronous Apex code neatly.","content":" Fluent API Async.apex has a fluent API that provides most of the Promise features. Functional Style Async.apex can be used seamlessly with R.apex in a functional style. Error Recovery Async.apex support easy error recovery by returning a new Async. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/async-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/async-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/async-apex/docs/search.html"},"Async":{"title":"Async","description":"Async","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} What is an Async? Async are just promises that are executed lazily. A promise wraps a piece of asynchronous code and resolves the value from the code when it's done. Here is what a promise would look like. new Promise(promiseExecutor) .then(successHandler) .catch(errorHandler) .finally(cleanupHandler); And in Async.apex: new Async(new CustomAsyncExecutor()) .then(new SuccessHandler()) .error(new ErrorHandler()) .done(new CleanupHandler()) .fork(); Async Status Async has three statuses. | Status | Description | | ------ | ----------- | | Pending | Asynchronous code is not executed, or is being executed | | Fulfilled | Asynchronous code has been executed, and result is set back | | Rejected | Asynchronous code has been executed, and error is set back | Normally a new Async is set with status as pending. When the execution is successful, Async status changes to fulfilled. Otherwise, it changes to rejected. Async Trigger Async is a lazy promise and it is only triggered when fork is invoked. new Async(new AsyncFunc()) .fork(); // pull the trigger Async Chaining We can chain asynchronous codes by returning a new Async in then/error/done. new Async(new AsyncCode1()) // Code in AsyncCode1 is executed asynchronously .then(new AsyncCode2()) // AsyncCode2 needs to return a new Async that wraps the code to be executed asynchronously .fork(); Limitations Async.apex uses Apex queueable jobs behind the scene. So all limitations on Apex queueable jobs also apply to Async.apex. ","srcFilePath":"src/pages/docs/Async/index.md","id":"Async","location":"/docs/Async/","url":"/async-apex/docs/Async/"},"Executor":{"title":"Executor","description":"Async Executor","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} What is Async.Executor? Async.Executor is an object that wraps a piece of code to be executed asynchronously in Async. Fundamentally, Async.Executor is a Func object that has resolve and reject methods. How to Create an Async.Executor? public class HelloWorldExecutor extends Async.Executor { public HelloWorldExecutor() { super(0); } public override Object exec() { this.resolve('HelloWorld'); } } Async promise = new Async(new HelloWorldExecutor()); Simplified Async.Executor Most of the time we can use a Func as a simplified Async.Executor. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); } public override Object exec() { return 'HelloWorld'; } } Async promise = new Async(new HelloWorldFunc()); ","srcFilePath":"src/pages/docs/Executor/index.md","id":"Executor","location":"/docs/Executor/","url":"/async-apex/docs/Executor/"},"Methods":{"title":"Methods","description":"Async Methods","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} How to Create an Async? Below are all the ways to create an Async. | Method | Description | | ------ | ----------- | | new Async(Async.Executor) | Create an Async with an Async.Executor | | new Async(Func) | Create an Async with a Func | | Async.resolve(Object) | Create a resolved Async returning the value | | Async.reject(Object) | Create a rejected Async returning the error | How to Query an Async? | Method | Description | | ------ | ----------- | | isPending() | Check if the Async is pending | | isResolved() | Check if the Async is fulfilled | | isRejected() | check if the Async is rejected | How to Chain an Async? | Method | Description | | ------ | ----------- | | then(Func, Func) | Add the success handler and the error handler | | then(Func) | Add the success handler | | error(Func) | Add the error handler | | done(Func) | Add the handler as the success handler and error handler | | fork() | Trigger the Async to execute | ","srcFilePath":"src/pages/docs/Methods/index.md","id":"Methods","location":"/docs/Methods/","url":"/async-apex/docs/Methods/"}},"childIds":["Async","Methods","Executor","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/async-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with Async.apex","url":"/async-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} Async.apex has a dependency on R.apex. So before we start, we need to include R.apex. Include Func.cls, R.cls, and RTest.cls(optional) into your Org, and R.apex is ready. Then we continue with Async.apex. Include Async.cls, and AsyncTest.cls(optional) into your Org, and you are ready to go. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/async-apex/tutorials/getting_started/step_1.html"},"step_2":{"title":"Preliminary Knowledge","description":"Preliminary Knowledge","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} It's recommended that you have a fair amount of knowledge on R.apex, but it's not required. Async.apex uses Func objects from R.apex, and a Func is actually a custom Apex object that mimics the behavior of a function. Here is how your implement a custom Func. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); // specify the number of arguments the Func takes } // Provide custom implementation for a Func that takes 0 arguments. public override Object exec() { return 'Hello World'; } } And then you instantiate, and invoke it. Func helloworld = new HelloWorldFunc(); String msg = (String)helloworld.run(); To get deeper with Func objects, please check R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/async-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"Async Executor","description":"Async Executor","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} An Async.Executor is a piece of code that runs asynchronously. In Async.apex, all codes that run asynchronously need to be placed in Async.Executor. To create an Async by using an Async Executor, we will create an Executor first. public class HelloWorldExecutor extends Async.Executor { public HelloWorldExecutor() { super(0); } public override Object exec() { this.resolve('HelloWorld'); } } Async.Executor is somehow similar with Func, right? It is because Async.Executor is just a subclass of Func. The difference lies in that Async.Executor provides two extra methods: resolve and reject. By invoking this.resolve(Object), we notify the Async with the success value, while by invoking this.reject(Object) we notify the Async with the error. Then we create an Async like this: Async promise = new Async(new HelloWorldExecutor()); Most of the time, we have an alternative, which is based on Funcs from R.apex. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); } public override Object exec() { return 'HelloWorld'; } } Async promise = new Async(new HelloWorldFunc()); These two version are equivalent. ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/async-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"Then/Catch/Finally","description":"Then/Catch/Finally","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} We have corresponding terms for then/catch/finally in Async.apex: then/error/done. Their usages are the same. promise.then(R.debug) .error(new ReportFunc()) .done(new CleanupFunc()) .fork(); Important is that differently from promises, Async instances are lazy, which means that we need to fork them to trigger the execution. ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/async-apex/tutorials/getting_started/step_4.html"},"step_5":{"title":"Error Recovery","description":"Error Recovery","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":5,"content":" {$page.title} Just like promises, we can recover from errors by returning a new Async(promise). promise.error(new ReturnAsyncFunc()) // recover from errors .then(new CustomCodeFunc()) // continue logic .fork(); ","srcFilePath":"src/pages/tutorials/getting_started/step_5.md","id":"step_5","location":"/tutorials/getting_started/step_5.html","url":"/async-apex/tutorials/getting_started/step_5.html"},"step_6":{"title":"Chaining","description":"Chaining","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":6,"content":" {$page.title} Funcs in then/error/done are executed synchronously. Only Async.Executor instances are executed asynchronously. That means that if we want to make a piece of code asynchronous, we will have to wrap it in Async. promise.then(new SyncCodeFunc()) // sync code .then(new ReturnAsyncFunc()) // async code executed in the returning Async .fork(); ","srcFilePath":"src/pages/tutorials/getting_started/step_6.md","id":"step_6","location":"/tutorials/getting_started/step_6.html","url":"/async-apex/tutorials/getting_started/step_6.html"}},"childIds":["step_1","step_2","step_3","step_4","step_5","step_6"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/async-apex"}